#ifndef CAMERA_HPP
#define CAMERA_HPP

#include "../maths/matrix.hpp"
#include "../types.h"
#include "../bitwise.h"
#include "object_3d_gl.hpp"
#include <string>

namespace kk3d {
namespace objects {

/**
 * \brief The basic camera object in KK3D.
 * This object contains 3D transformation and a view matrix for cameras.
 */
class Camera3D : public Object3DGL {
protected:
    kk3d::math::Matrix4x4 _mat_view;                    /**< The view matrix. */

public:
    /**
     * \brief Basic constructor.
     * No values are set, this creates a blank GL object.
     */
    Camera3D();
    /**
     * \brief Basic constructor setting some values.
     * The constructor sets only the parent and ID of the object.
     * @param p The parent object of this object.
     * @param i The ID of the object.
     */
    Camera3D(Object *p, int i);
    /**
     * \brief Basic constructor setting some values.
     * The constructor sets only the parent object and the name.
     * @param p The parent object of this object.
     * @param n The name of the object.
     */
    Camera3D(Object *p, std::string n);
    /**
     * \brief Basic destructor.
     * Clears the data generated by the object.
     */
    ~Camera3D();

    /**
     * \brief The pointer to the view matrix.
     * Returns the pointer to the view matrix which contains the inverted transform matrix.
     * @return The pointer to the view matrix.
     */
    kk3d::math::Matrix4x4 * getView();
    /**
     * \brief Inverts the OpenGL matrix.
     * Calling this will set the view matrix with the inverted GL matrix. Call after building the GL matrix.
     */
    void buildView();
};

};
};

#endif
