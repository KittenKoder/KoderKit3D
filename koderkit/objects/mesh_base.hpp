
#ifndef MESH_BASE_HPP
#define MESH_BASE_HPP

#include "../types.h"
#include "../bitwise.h"
#include <string>

namespace kk3d {
namespace mesh {

/**
 * The basic camera object in KK3D.
 * This object contains 3D transformation and a view matrix for cameras.
 */
class MeshBase {
protected:
    std::string *_name;                                 /**< The name of the object. The pointer is owned. */
    uint _type;                                         /**< The type flags of the object. */
    int _id;                                            /**< The ID value of object. */

    static const uint MESH_TYPE_STATIC = 1;             /**< Mesh contains static model data. */
    static const uint MESH_TYPE_FLAT = 2;               /**< Mesh contains flat model data. */

public:
    static const int INFLAG_UPLOADED = 1;       /**< Internal flag for having been uploaded. */
    static const int INFLAG_REPLACED = 2;       /**< Internal flag for hacing data been replaced. */

    /**
     * Basic constructor.
     * No values are set, this creates a blank GL object.
     */
    MeshBase();
    /**
     * Basic constructor setting some values.
     * The constructor sets only the ID of the mesh.
     * @param i The ID of the object.
     */
    MeshBase(int i);
    /**
     * Basic constructor setting some values.
     * The constructor sets only the name.
     * @param n The name of the object.
     */
    MeshBase(std::string n);
    /**
     * Basic destructor.
     * Clears the data generated by the object.
     */
    ~MeshBase();

    /**
     * Sets the name object. A new string object is created by this object to store the name.
     * The name object created by this object is deleted by this object if destroyed.
     * @param n The name of this object.
     */
    void setName(std::string n);
    /**
     * Gets the name of this object. The pointer is owned and managed by the object. Modyfing the contents of
     * the pointer will modify the name. Do not delete this pointer.
     * @return The name of this object.
     */
    std::string *getName();
    /**
     * Gets the read-only flags describing the object.
     * The flags returned by this are set by the object constructor describing what the object contains.
     * This can be used to identify the object as well.
     * @return The flags describing the contents of the object.
     */
    uint getTypeFlags();
    /**
     * Set the ID value.
     * The ID of the object is an optional method of locating objects within the managers.
     * @param i The ID value.
     */
    void setID(int i);
    /**
     * Get the ID value.
     * The ID value is the best method of indexing the objects in managers.
     * @return The ID value set.
     */
    int getID();
};

};
};

#endif

