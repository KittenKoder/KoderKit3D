#ifndef OBJECT_3D_MESH_HPP
#define OBJECT_3D_MESH_HPP

#include "../maths/matrix.hpp"
#include "../types.h"
#include "../bitwise.h"
#include "object_3d_gl.hpp"
#include "mesh_static.hpp"
#include <string>

namespace kk3d {
namespace objects {

/**
 * The basic camera object in KK3D.
 * This object contains 3D transformation and a view matrix for cameras.
 */
class Object3DMesh : public Object3DGL {
protected:
    // Mesh object.
    // Materials [4].
    mesh::MeshStatic *_mesh;                    /**< Mesh of the object. */
    math::Matrix3x3 _mat_normal;                /**< Normal matrix. */
    GLfloat _light;                             /**< Light level object is in. */

public:
    /**
     * Basic constructor.
     * No values are set, this creates a blank GL object.
     */
    Object3DMesh();
    /**
     * Basic constructor setting some values.
     * The constructor sets only the parent and ID of the object.
     * @param p The parent object of this object.
     * @param i The ID of the object.
     */
    Object3DMesh(Object *p, int i);
    /**
     * Basic constructor setting some values.
     * The constructor sets only the parent object and the name.
     * @param p The parent object of this object.
     * @param n The name of the object.
     */
    Object3DMesh(Object *p, std::string n);
    /**
     * Basic destructor.
     * Clears the data generated by the object.
     */
    ~Object3DMesh();

    virtual void buildGLMatrix();

};

};
};

#endif
