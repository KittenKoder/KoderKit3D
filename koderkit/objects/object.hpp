#ifndef OBJECT_HPP
#define OBJECT_HPP

#include "../types.h"
#include "../bitwise.h"
#include <string>

namespace kk3d {

/**
 * The basic object in KK3D.
 * Contains only the name, parent, and ID values of the object. When setting the parent objects be careful of recursive errors.
 * This is the basic class from which all other objects are derived.
 */
class Object {
protected:
    uint _flags;                                        /**< The flags set. */
    Object *_parent;                                    /**< The parent of the object. */
    std::string *_name;                                 /**< The name of the object. The pointer is owned. */
    uint _type;                                         /**< The type flags of the object. */
    int _id;                                            /**< The ID value of object. */

public:
    static const uint OBJECT_FLAG_VISIBLE = 1;         /**< If the object is visible in rendering. Used for OpenGL objects. */

    static const uint OBJECT_TYPE_TRANSFORMS = 1;      /**< Object contains transformation data. */
    static const uint OBJECT_TYPE_VIEW = 2;            /**< Object contains a view matrix. View matrix is an inverted transformation matrix. */
    static const uint OBJECT_TYPE_GLMATRIX = 4;        /**< Object contains a complete GL matrix. This contains the parent transformations as well. */
    static const uint OBJECT_TYPE_MESH = 8;            /**< Object contains a mesh and related data. */
    static const uint OBJECT_TYPE_MESH_FLAT = 16;      /**< Object contains a flat mesh and related data. */

    /**
     * Basic constructor.
     * No values are set, this creates a blank GL object.
     */
    Object();
    /**
     * Basic constructor setting some values.
     * The constructor sets only the parent and ID of the object.
     * @param p The parent object of this object.
     * @param i The ID of the object.
     */
    Object(Object *p, int i);
    /**
     * Basic constructor setting some values.
     * The constructor sets only the parent object and the name.
     * @param p The parent object of this object.
     * @param n The name of the object.
     */
    Object(Object *p, std::string n);
    /**
     * Basic destructor. Clears the data generated by the object.
     */
    ~Object();

    /**
     * Sets the parent of the object. Be careful of recursive errors.
     * @param p The parent object of this object.
     */
    void setParent(Object *p);
    /**
     * Gets the parent object.
     * @return The parent object of this object.
     */
    Object *getParent();
    /**
     * Sets the binary flags contained in the value passed. This does not alter the flags already set.
     * @param f Flags to be set.
     */
    void setFlags(uint f);
    /**
     * Clears the binary flags contained in the value passed. This does not alter any other flags.
     * @param f Flags to be cleared.
     */
    void clearFlags(uint f);
    /**
     * Returns the flags set.
     * @return The flags of the object.
     */
    uint getFlags();
    /**
     * Sets the name object. A new string object is created by this object to store the name.
     * The name object created by this object is deleted by this object if destroyed.
     * @param n The name of this object.
     */
    void setName(std::string n);
    /**
     * Gets the name of this object. The pointer is owned and managed by the object. Modyfing the contents of
     * the pointer will modify the name. Do not delete this pointer.
     * @return The name of this object.
     */
    std::string *getName();
    /**
     * Gets the read-only flags describing the object.
     * The flags returned by this are set by the object constructor describing what the object contains.
     * This can be used to identify the object as well.
     * @return The flags describing the contents of the object.
     */
    uint getTypeFlags();
    /**
     * Set the ID value.
     * The ID of the object is an optional method of locating objects within the managers.
     * @param i The ID value.
     */
    void setID(int i);
    /**
     * Get the ID value.
     * The ID value is the best method of indexing the objects in managers.
     * @return The ID value set.
     */
    int getID();
};

}
#endif // OBJECT_3D_HPP
